import heapq
from collections import defaultdict

def dijkstra(graph, start):
    # Priority queue to store vertices and their minimum distances
    priority_queue = []
    heapq.heappush(priority_queue, (0, start))  # (distance, vertex)
    
    # Dictionary to keep track of minimum distance to each vertex
    min_distance = {vertex: float('inf') for vertex in graph}
    min_distance[start] = 0
    
    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)
        
        # If current distance is greater than recorded distance, skip
        if current_distance > min_distance[current_vertex]:
            continue
        
        # Explore neighbors
        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight
            
            # If found shorter path to neighbor, update and push to queue
            if distance < min_distance[neighbor]:
                min_distance[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
    
    return min_distance

# Example graph
graph = {
    'A': {'B': 5, 'C': 3},
    'B': {'D': 9},
    'C': {'B': 2, 'D': 6},
    'D': {}
}

# Find shortest paths from 'A' to all other vertices
start_vertex = 'A'
result = dijkstra(graph, start_vertex)

print("Shortest distances from", start_vertex)
for vertex, distance in result.items():
    print(f"Distance to {vertex}:", distance)
 
Output:-

Shortest distances from A
Distance to A: 0
Distance to B: 5
Distance to C: 3
Distance to D: 9
